generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Location {
  id              Int       @id @default(autoincrement())
  name            String
  latitude        Float
  longitude       Float
  country         String
  surfing         Boolean   @default(false)
  windsurfing     Boolean   @default(false)
  kitesurfing     Boolean   @default(false)
  wingsurfing     Boolean   @default(false)
  paddleboarding  Boolean   @default(false)
  parking         String
  toilets         String
  wavetype        String
  cafe            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  favourite       UserFavouriteLocations[]
}

model UserFavouriteLocations {
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  location      Location  @relation(fields: [locationId], references: [id])
  locationId    Int
  assignedAt    DateTime  @default(now())

  @@id([userId, locationId])       
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  locations     Location[]
  favourite     UserFavouriteLocations[]
}



model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}